#!/usr/bin/python

import yaml
import os
import sys
import shutil
import json
import time
import argparse


class Sideloader:
    def __init__(self):
        self.sideloader_config = yaml.load(
            open('config.yaml')
        )

        self.install_location = self.sideloader_config['install_location']

        args = self.parseArgs()

        self.githuburl = args.repo

        self.branch = self.sideloader_config.get('default_branch', 'develop')
        self.deploy_file = '.deploy.yaml'
        self.push_command = self.sideloader_config.get('drop_command', None)

        if args.branch:
            self.branch = args.branch

        if args.deploy_file:
            self.deploy_file = args.deploy_file

        if args.push:
            self.push_command = args.push

        # Rip the github url apart
        chunks = self.githuburl.split(':')[1].split('/')
        self.repo = chunks[-1][:-4]
        self.org = chunks[-2]

        # It's all about the paths
        self.workspace = os.path.join('/workspace', self.repo)
        self.build = os.path.join(self.workspace, 'build')

        # Paths for build time
        self.build_venv = os.path.join(self.workspace, 've')
        self.pip = os.path.join(self.build_venv, 'bin/pip')
        self.python = os.path.join(self.build_venv, 'bin/python')

        # Paths for post-install time
        self.install_venv = os.path.join(self.install_location, 'python')
        self.install_pip = os.path.join(self.install_venv, 'bin/pip')
        self.install_python = os.path.join(self.install_venv, 'bin/python')

        self.env = {
            'VENV': self.build_venv, 
            'PIP': "PIP_DOWNLOAD_CACHE=~/.pip_cache %s" % self.pip,
            'WORKSPACE': self.workspace, 
            'BUILDDIR': self.build, 
            'INSTALLDIR': self.install_location,
            'PATH': os.path.join(
                self.build_venv, 'bin') + ':' + os.getenv('PATH')
        }
        for k, v in self.env.items():
            os.putenv(k, v)

        self.deploy_yam = {}

        self.cachefile = os.path.join(os.getcwd(), 'build_cache')

        if os.path.exists(self.cachefile):
            self.build_cache = json.loads(open(self.cachefile).read())
        else:
            self.build_cache = {}

        print self.build_cache

    def parseArgs(self):
        parser = argparse.ArgumentParser(description='Build a github repo')
        parser.add_argument("repo", help="Git repo", type=str)
        parser.add_argument("--branch", help="Git branch")
        parser.add_argument("--deploy-file", help="Deploy YAML file (default .deploy.yaml)")
        parser.add_argument("--push", help="Push command")
        args = parser.parse_args()

        return args


    def log(self, s):
        sys.stdout.write("[%s] %s\n" % (time.ctime(), s))
        sys.stdout.flush()

    def saveCache(self):
        f = open(self.cachefile, 'wt')
        f.write(
            json.dumps(self.build_cache)
        )
        f.close()

    def getBuildNumber(self):
        if self.repo in self.build_cache:
            build = int(self.build_cache[self.repo]) + 1
        else:
            build = 1

        self.build_cache[self.repo] = build
        return build


    def createWorkspace(self):
        if os.path.exists(self.workspace):
            shutil.rmtree(self.workspace)

        os.makedirs(self.workspace)
        os.makedirs(self.build)

        os.chdir(self.workspace)
        # Clone project
        self.log("Fetching github repo")
        os.system('git clone %s' % (self.githuburl))

        # Checkout the desired branch
        os.chdir(os.path.join(self.workspace, self.repo))
        os.system('git checkout %s' % self.branch)

        self.log("Creating virtualenv")
        # Create clean virtualenv
        if os.path.exists(self.build_venv):
            shutil.rmtree(self.build_venv)
        os.system('virtualenv --no-site-packages %s' % self.build_venv)

        self.deploy_yam = yaml.load(
            open(os.path.join(self.workspace, self.repo, self.deploy_file))
        )

        self.log("Installing pip dependencies")
        # Install things
        for dep in self.deploy_yam.get('pip', []):
            print "Installing", dep
            os.system('PIP_DOWNLOAD_CACHE=~/.pip_cache %s install %s' % (self.pip, dep))

        os.chdir(self.workspace)

    def createPackage(self):
        self.log("Preparing package")
        package = os.path.join(self.workspace,'package')
        dest = os.path.join(package, self.install_location.lstrip('/'))
        supervisor = os.path.join(package, 'etc/supervisor/conf.d')
        nginx = os.path.join(package, 'etc/nginx/sites-enabled')

        print self.build, '->', dest

        try:
            os.makedirs(package)
            os.makedirs(dest)
            os.makedirs(supervisor)
            os.makedirs(nginx)
        except:
            pass

        # Clone build contents to install location
        for d in os.listdir(self.build):
            try:
                shutil.copytree(os.path.join(self.build, d), os.path.join(dest, d))
            except:
                print "Warning: Could not copy %s to package" % d

        # Create nginx configs
        for conf in self.deploy_yam.get('nginx', []):
            shutil.copy(os.path.join(self.build, conf), nginx)

        # Create supervisor configs
        for conf in self.deploy_yam.get('supervisor', []):
            shutil.copy(os.path.join(self.build, conf), supervisor)

        self.log("Constructing postinstall script")
        # Construct a post-install that also creates our virtualenv
        os.system('%s freeze > %s/%s-requirements.pip' % (self.pip, dest, self.repo))

        postinstall = os.path.join(self.workspace, 'postinstall.sh')
        postscript = open(postinstall, 'wt')
        postscript.write("#!/bin/bash\n")
        postscript.write(
            "/usr/bin/virtualenv --no-site-packages %s\n" % self.install_venv)

        # Upgrade pip so we can use the package cache
        postscript.write("mkdir ~/.pip_cache\n")

        # Help out our post-install scripts and activate the virtualenv
        postscript.write("INSTALLDIR=%s\n" % self.install_location)
        postscript.write("VENV=%s\n" % self.install_venv)
        postscript.write(
            'PIP="PIP_DOWNLOAD_CACHE=~/.pip_cache %s"\n' % self.install_pip)
        postscript.write('source $VENV/bin/activate\n')

        # re-install pip requirements
        postscript.write(
            "PIP_DOWNLOAD_CACHE=~/.pip_cache %s install -r %s\n" % (
                self.install_pip,
                os.path.join(self.install_location,
                    '%s-requirements.pip' % self.repo)
            )
        )

        # Merge the custom postinstall
        if self.deploy_yam.get('postinstall'):
            mypost = open(os.path.join(self.workspace, self.repo,
                self.deploy_yam.get('postinstall')))
            for ln in mypost:
                postscript.write(ln)

        postscript.write('\ndeactivate\n')
        postscript.close()

        os.chmod(postinstall, 0777)

        for ln in open(postinstall):
            self.log(" --- %s" % (ln.strip('\n')))

        os.chdir(package)

        # Figure out a build version or use the one in self.deploy_file
        build_num = self.getBuildNumber()
        version = self.deploy_yam.get('version', "0.%s" % build_num)

        # Build a dependency list
        depends = ""
        deplist = self.deploy_yam.get('dependencies',
            ['nginx', 'supervisor', 'python-virtualenv'])
        for dep in deplist:
            depends += ' -d "%s"' % dep

        if self.deploy_yam.get('user'):
            user = '--deb-user %s ' % self.deploy_yam['user']
        else:
            user = ''
        self.log("Building .deb package")
        os.system(
            'fpm -s dir -t deb -a amd64 -n %s -v %s --after-install %s --prefix / %s %s *' % (
                self.repo,
                version,
                postinstall,
                depends,
                user
            )
        )

        self.log("Signing package")
        # Sign the package, if we care
        key = self.sideloader_config.get('gpg_key')
        if key:
            os.system('dpkg-sig -k %s --sign builder *.deb' % key)

        self.log("Uploading package")
        os.system(
            self.drop_command % "*.deb"
        )

        # Save the cache at this point, because the packaging was successful
        self.saveCache()
        self.log("Build completed successfully")

    def buildProject(self):
        self.createWorkspace()

        self.log("Project config: " + repr(self.deploy_yam))
        self.log("Lauching build script")

        os.system(
            os.path.join(
                self.workspace,
                self.repo,
                self.deploy_yam['buildscript']
            )
        )
        self.createPackage()

sideloader = Sideloader()
sideloader.buildProject()
