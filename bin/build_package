#!/usr/bin/python

import yaml
import os
import sys
import shutil
import json
import time
import argparse

class Sideloader:
    def __init__(self):
        self.sideloader_config = yaml.load(
            open('config.yaml')
        )

        self.install_location = self.sideloader_config['install_location']

        args = self.parseArgs()

        self.githuburl = args.repo

        self.branch = self.sideloader_config.get('default_branch', 'develop')
        self.deploy_file = '.deploy.yaml'

        if args.branch:
            self.branch = args.branch

        if args.deploy_file:
            self.deploy_file = args.deploy_file

        if args.build:
            self.build_num = args.build
        else:
            self.build_num = None


        if args.name:
            self.name = args.name
        else:
            self.name = None

        if args.build_script:
            self.bscript = args.build_script
        else:
            self.bscript = None

        if args.postinst_script:
            self.postinst_script = args.postinst_script
        else:
            self.postinst_script = None

        if args.dtype:
            self.deploy_type = args.dtype
        else:
            self.deploy_type = None

        if args.id:
            ws = args.id
        else:
            ws = self.repo

        # Rip the github url apart
        chunks = self.githuburl.split(':')[1].split('/')
        self.repo = chunks[-1][:-4]
        self.org = chunks[-2]

        # It's all about the paths
        self.workspace = os.path.join('/workspace', ws)
        self.build = os.path.join(self.workspace, 'build')
        self.packages = '/workspace/packages'

        # Paths for build time
        self.build_venv = os.path.join(self.workspace, 've')
        self.pip = os.path.join(self.build_venv, 'bin/pip')
        self.python = os.path.join(self.build_venv, 'bin/python')

        # Paths for post-install time
        self.install_venv = os.path.join(self.install_location, 'python')
        self.install_pip = os.path.join(self.install_venv, 'bin/pip')
        self.install_python = os.path.join(self.install_venv, 'bin/python')

        self.env = {
            'VENV': self.build_venv, 
            'PIP': self.pip,
            'REPO': self.repo,
            'BRANCH': self.branch,
            'WORKSPACE': self.workspace, 
            'BUILDDIR': self.build, 
            'PIP_DOWNLOAD_CACHE': '~/.pip_cache',
            'INSTALLDIR': self.install_location,
            'PATH': os.path.join(
                self.build_venv, 'bin') + ':' + os.getenv('PATH')
        }
        for k, v in self.env.items():
            os.putenv(k, v)

        self.deploy_yam = {}

    def parseArgs(self):
        parser = argparse.ArgumentParser(description='Build a github repo')
        parser.add_argument("repo", help="Git repo", type=str)
        parser.add_argument("--branch", help="Git branch")
        parser.add_argument("--build", help="Build version")
        parser.add_argument("--id", help="Workspace ID")
        parser.add_argument("--deploy-file", help="Deploy YAML file (default .deploy.yaml)")
        parser.add_argument("--name", help="Package name")
        parser.add_argument("--build-script", help="Build script relative path")
        parser.add_argument("--postinst-script", help="Post-install script relative path")
        parser.add_argument("--dtype", help="Deploy type")
        args = parser.parse_args()

        return args

    def log(self, s):
        sys.stdout.write("[%s] %s\n" % (time.ctime(), s))
        sys.stdout.flush()

    def createWorkspace(self):
        if os.path.exists(self.workspace):
            # Clean up workspace, except VE
            repo = os.path.join(self.workspace, self.repo)
            if os.path.exists(repo):
                shutil.rmtree(repo)
            if os.path.exists(self.build):
                shutil.rmtree(self.build)
            package = os.path.join(self.workspace,'package')
            if os.path.exists(package):
                shutil.rmtree(package)
        else:
            os.makedirs(self.workspace)

        os.makedirs(self.build)

        os.chdir(self.workspace)
        # Clone project
        self.log("Fetching github repo")
        os.system('git clone %s' % (self.githuburl))

        # Checkout the desired branch
        os.chdir(os.path.join(self.workspace, self.repo))
        os.system('git checkout %s' % self.branch)

        self.deploy_yam = yaml.load(
            open(os.path.join(self.workspace, self.repo, self.deploy_file))
        )

        if not self.deploy_type:
            self.deploy_type = self.deploy_yam.get('buildtype', 'virtualenv')
        
        if self.deploy_type == 'virtualenv':
            self.log("Creating virtualenv")
            # Create clean virtualenv
            os.system('virtualenv --setuptools --no-site-packages %s' % self.build_venv)

            self.log("Upgrading pip")
            os.system('PIP_DOWNLOAD_CACHE=~/.pip_cache %s install --upgrade pip' % self.pip)

            self.log("Installing pip dependencies")
            # Install things
            for dep in self.deploy_yam.get('pip', []):
                print "Installing", dep
                os.system('PIP_DOWNLOAD_CACHE=~/.pip_cache %s install --upgrade %s' % (self.pip, dep))

        if not self.postinst_script:
            self.postinst_script = self.deploy_yam.get('postinstall')

        if not self.bscript:
            self.bscript = self.deploy_yam.get('buildscript')

        if not self.name:
            self.name = self.repo

        self.log("Final build settings: %s" % repr({
            'repo': self.repo,
            'postinst_script': self.postinst_script,
            'name': self.name,
            'type': self.deploy_type,
            'build_script': self.bscript
        }))

        os.putenv('NAME', self.name)
        os.chdir(self.workspace)

    def createPackage(self):
        self.log("Preparing package")
        package = os.path.join(self.workspace,'package')
        dest = os.path.join(package, self.install_location.lstrip('/'))
        supervisor = os.path.join(package, 'etc/supervisor/conf.d')
        nginx = os.path.join(package, 'etc/nginx/sites-enabled')

        print self.build, '->', dest

        try:
            os.makedirs(package)
            os.makedirs(dest)
            os.makedirs(supervisor)
            os.makedirs(nginx)
        except:
            pass

        # Clone build contents to install location
        for d in os.listdir(self.build):
            try:
                shutil.copytree(os.path.join(self.build, d), os.path.join(dest, d))
            except:
                print "Warning: Could not copy %s to package" % d

        # Create nginx configs
        for conf in self.deploy_yam.get('nginx', []):
            shutil.copy(os.path.join(self.build, conf), nginx)

        # Create supervisor configs
        for conf in self.deploy_yam.get('supervisor', []):
            shutil.copy(os.path.join(self.build, conf), supervisor)

        self.log("Constructing postinstall script")

        postinstall = os.path.join(self.workspace, 'postinstall.sh')
        postscript = open(postinstall, 'wt')
        postscript.write("#!/bin/bash\n")

        # Construct a post-install that also creates our virtualenv
        if self.deploy_type == 'virtualenv':
            # Freeze post build requirements
            os.system('%s freeze > %s/%s-requirements.pip' % (self.pip, dest, self.name))

            postscript.write(
                "/usr/bin/virtualenv --setuptools"
                " --no-site-packages %s\n" % self.install_venv)

            # Upgrade pip so we can use the package cache
            postscript.write("mkdir ~/.pip_cache\n")

            # Help out our post-install scripts and activate the virtualenv
            postscript.write("VENV=%s\n" % self.install_venv)
            postscript.write(
                'PIP="PIP_DOWNLOAD_CACHE=~/.pip_cache %s"\n' % self.install_pip)

            # Activate VE
            postscript.write('source $VENV/bin/activate\n')

            # Upgrade PIP
            postscript.write(
                "PIP_DOWNLOAD_CACHE=~/.pip_cache"
                " %s install --upgrade pip\n" % self.install_pip
            )
            # re-install pip requirements
            postscript.write(
                "PIP_DOWNLOAD_CACHE=~/.pip_cache %s install --upgrade -r %s\n" % (
                    self.install_pip,
                    os.path.join(self.install_location,
                        '%s-requirements.pip' % self.name)
                )
            )

        postscript.write("INSTALLDIR=%s\n" % self.install_location)
        postscript.write("REPO=%s\n" % self.repo)
        postscript.write("NAME=%s\n" % self.name)
        postscript.write("BRANCH=%s\n" % self.branch)

        # Merge the custom postinstall
        if self.postinst_script:
            mypost = open(
                os.path.join(self.workspace, self.repo, self.postinst_script))
            for ln in mypost:
                postscript.write(ln)

        if self.deploy_type == 'virtualenv':
            postscript.write('\ndeactivate\n')

        postscript.close()

        os.chmod(postinstall, 0777)

        for ln in open(postinstall):
            self.log(" --- %s" % (ln.strip('\n')))

        os.chdir(package)

        # Figure out a build version or use the one in self.deploy_file
        version = self.deploy_yam.get('version', "0.%s" % self.build_num)

        # Build a dependency list
        depends = ""

        if self.deploy_type == 'virtualenv':
            depdefaults = ['nginx', 'supervisor', 'python-virtualenv']
        else:
            depdefaults = []

        deplist = self.deploy_yam.get('dependencies', depdefaults)

        for dep in deplist:
            depends += ' -d "%s"' % dep

        if self.deploy_yam.get('user'):
            user = '--deb-user %s ' % self.deploy_yam['user']
        else:
            user = ''


        self.log("Building .deb package")

        fpm = 'fpm -s dir -t deb -a amd64 -n %s -v %s --after-install %s --prefix / %s %s *' % (
            self.name,
            version,
            postinstall,
            depends,
            user
        )

        os.system(fpm)

        self.log("Signing package")
        # Sign the package, if we care
        key = self.sideloader_config.get('gpg_key')
        if key:
            os.system('dpkg-sig -k %s --sign builder *.deb' % key)

        self.log("Build completed successfully")

    def buildProject(self):
        self.createWorkspace()

        self.log("Project config: " + repr(self.deploy_yam))
        self.log("Launching build script")

        buildscript = os.path.join(
                self.workspace,
                self.repo,
                self.deploy_yam['buildscript']
            )

        os.system('chmod a+x %s' % buildscript)
        os.system(buildscript)

        self.createPackage()

sideloader = Sideloader()
sideloader.buildProject()
